import rasterio
import json
import numpy as np
from rasterio.transform import rowcol
from pyproj import Transformer

# –ü—É—Ç–∏ –∫ —Ä–∞—Å—Ç—Ä–æ–≤—ã–º —Ñ–∞–π–ª–∞–º
wintering_tif_path = "/home/anya2812/–ó–∞–≥—Ä—É–∑–∫–∏/woothr_abundance_seasonal_nonbreeding_mean_2022.tif"
breeding_tif_path = "/home/anya2812/–ó–∞–≥—Ä—É–∑–∫–∏/woothr_abundance_seasonal_breeding_mean_2022.tif"
json_path = "/home/anya2812/PycharmProjects/pythonProject/Oenanthe oenanthe/Grid/data_final_2017.json"
output_json = "grid_abundance.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º JSON
with open(json_path, "r", encoding="utf-8") as f:
    data_points = json.load(f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—Ç—Ä–æ–≤—ã–µ —Ñ–∞–π–ª—ã –æ–¥–∏–Ω —Ä–∞–∑
rasters = {
    "wintering": rasterio.open(wintering_tif_path),
    "breeding": rasterio.open(breeding_tif_path),
}

# –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ç—Ä–æ–≤ –≤ –º–∞—Å—Å–∏–≤ numpy
raster_data = {season: rasters[season].read(1) for season in rasters}
nodata_values = {season: rasters[season].nodata for season in rasters}

# –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç WGS84 -> CRS TIFF
transformers = {season: Transformer.from_crs("EPSG:4326", rasters[season].crs, always_xy=True) for season in rasters}

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
results = []

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏
for point in data_points:
    lat, lon = point["latitude"], point["longitude"]
    season = point["season"]

    if season not in rasters:
        abundance = None  # –ï—Å–ª–∏ —Å–µ–∑–æ–Ω–∞ –Ω–µ—Ç –≤ —Ä–∞—Å—Ç—Ä–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö
    else:
        raster = rasters[season]
        transformer = transformers[season]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã WGS84 ‚Üí CRS TIFF
        x, y = transformer.transform(lon, lat)

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∏–Ω–¥–µ–∫—Å—ã –ø–∏–∫—Å–µ–ª–µ–π
        row, col = rowcol(raster.transform, x, y)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–Ω—É—Ç—Ä–∏ –ª–∏ —Ç–æ—á–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if 0 <= row < raster.height and 0 <= col < raster.width:
            abundance = raster_data[season][row, col]

            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - NoData, —Ç–æ —Å—Ç–∞–≤–∏–º None
            if abundance == nodata_values[season]:
                abundance = None
            else:
                abundance = float(abundance)
        else:
            abundance = None  # –¢–æ—á–∫–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —Ä–∞—Å—Ç—Ä–∞

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    results.append({"latitude": lat, "longitude": lon, "season": season, "abundance": abundance})

# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–∞—Å—Ç—Ä–æ–≤—ã–µ —Ñ–∞–π–ª—ã
for raster in rasters.values():
    raster.close()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
with open(output_json, "w", encoding="utf-8") as f:
    json.dump(results, f, ensure_ascii=False, indent=4)

print(f"Results saved to {output_json}")

finish_output_json = "grid_abundance_normalized.json"


# –£–±–∏—Ä–∞–µ–º NaN –∏ None –∏–∑ –¥–∞–Ω–Ω—ã—Ö
breeding_abundances = [p["abundance"] for p in results if p["season"] == "breeding" and p["abundance"] is not None and not np.isnan(p["abundance"])]
wintering_abundances = [p["abundance"] for p in results if p["season"] == "wintering" and p["abundance"] is not None and not np.isnan(p["abundance"])]

# –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—ã
breeding_sum = sum(breeding_abundances) if breeding_abundances else 0
wintering_sum = sum(wintering_abundances) if wintering_abundances else 0


# –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º —Å—É–º–º—ã
print(f"üîπ –°—É–º–º–∞ breeding: {breeding_sum}")
print(f"üîπ –°—É–º–º–∞ wintering: {wintering_sum}")

breeding_max = max(breeding_abundances) if breeding_abundances else 0
wintering_max = max(wintering_abundances) if wintering_abundances else 0


# –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º —Å—É–º–º—ã
print(f"üîπ max breeding: {breeding_max}")
print(f"üîπ max wintering: {wintering_max}")

breeding_min = min(breeding_abundances) if breeding_abundances else 0
wintering_min = min(wintering_abundances) if wintering_abundances else 0


# –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º —Å—É–º–º—ã
print(f"üîπ –°—É–º–º–∞ breeding: {breeding_min}")
print(f"üîπ –°—É–º–º–∞ wintering: {wintering_min}")

# –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
normalized_data = []

for point in results:
    abundance = point["abundance"]
    season = point["season"]

    if abundance is not None and not np.isnan(abundance):
        if season == "breeding" and breeding_sum > 0:
            norm_abundance = abundance / breeding_sum
        elif season == "wintering" and wintering_sum > 0:
            norm_abundance = abundance / wintering_sum
        else:
            norm_abundance = None  # –ï—Å–ª–∏ —Å—É–º–º–∞ 0, –æ—Å—Ç–∞–≤–ª—è–µ–º None
    else:
        norm_abundance = None

    normalized_data.append({
        "latitude": point["latitude"],
        "longitude": point["longitude"],
        "season": season,
        "abundance": norm_abundance
    })

breeding_abundances = [p["abundance"] for p in normalized_data if p["season"] == "breeding" and p["abundance"] is not None and not np.isnan(p["abundance"])]
wintering_abundances = [p["abundance"] for p in normalized_data if p["season"] == "wintering" and p["abundance"] is not None and not np.isnan(p["abundance"])]

# –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—ã
breeding_sum = sum(breeding_abundances) if breeding_abundances else 0
wintering_sum = sum(wintering_abundances) if wintering_abundances else 0


# –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º —Å—É–º–º—ã
print(f"üîπ –°—É–º–º–∞ breeding: {breeding_sum}")
print(f"üîπ –°—É–º–º–∞ wintering: {wintering_sum}")

breeding_max = max(breeding_abundances) if breeding_abundances else 0
wintering_max = max(wintering_abundances) if wintering_abundances else 0


# –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º —Å—É–º–º—ã
print(f"üîπ max breeding: {breeding_max}")
print(f"üîπ max wintering: {wintering_max}")

breeding_min = min(breeding_abundances) if breeding_abundances else 0
wintering_min = min(wintering_abundances) if wintering_abundances else 0


# –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º —Å—É–º–º—ã
print(f"üîπ –°—É–º–º–∞ breeding: {breeding_min}")
print(f"üîπ –°—É–º–º–∞ wintering: {wintering_min}")


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π JSON
with open(finish_output_json, "w", encoding="utf-8") as f:
    json.dump(normalized_data, f, ensure_ascii=False, indent=4)

print(f"‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_json}")


